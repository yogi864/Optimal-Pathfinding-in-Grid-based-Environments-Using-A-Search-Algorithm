import heapq
import math
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display
class Cell:
 def __init__(self, x, y, traversable=True):
 self.x = x
 self.y = y
 self.traversable = traversable
class Grid:
 def __init__(self, width, height):
 self.width = width
 self.height = height
 self.grid = [[Cell(x, y) for y in range(height)] for x in range(width)]
 def set_obstacle(self, x, y):
 self.grid[x][y].traversable = False
 def is_traversable(self, x, y):
 return self.grid[x][y].traversable
def euclidean_distance(x1, y1, x2, y2):
 return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)
def a_star(grid, start, goal):
 open_set = [(0, id(start), start)]
 came_from = {}
 g_score = {start: 0}
 while open_set:
 _, _, current = heapq.heappop(open_set)
 if current == goal:
 return reconstruct_path(came_from, goal)
 for neighbor in get_neighbors(grid, current):
 tentative_g_score = g_score[current] + 1 # Assuming each move costs 1
 if tentative_g_score < g_score.get(neighbor, float('inf')):
 came_from[neighbor] = current
 g_score[neighbor] = tentative_g_score
 f_score = tentative_g_score + euclidean_distance(neighbor.x, neighbor.y, goal.x,
goal.y)
 heapq.heappush(open_set, (float(f_score), id(neighbor), neighbor)) # Pushing with
unique identifier
 return None # No path found
def get_neighbors(grid, cell):
 neighbors = []
 for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
 new_x, new_y = cell.x + dx, cell.y + dy
 if 0 <= new_x < grid.width and 0 <= new_y < grid.height and grid.is_traversable(new_x,
new_y):
 neighbors.append(grid.grid[new_x][new_y])
 return neighbors
def reconstruct_path(came_from, current):
 path = [current]
 while current in came_from:
 current = came_from[current]
 path.append(current)
 return path[::-1] # Reverse the path to start from the beginning
def visualize(grid, start, goal):
 path = a_star(grid, start, goal)
 if path is None:
 print("No path found")
 return
 plt.figure(figsize=(grid.width, grid.height))
 for x in range(grid.width):
 for y in range(grid.height):
 cell = grid.grid[x][y]
 if not cell.traversable:
 plt.fill([cell.x, cell.x+1, cell.x+1, cell.x], [cell.y, cell.y, cell.y+1, cell.y+1], color='black')
 for cell in path:
 plt.fill([cell.x, cell.x+1, cell.x+1, cell.x], [cell.y, cell.y, cell.y+1, cell.y+1], color='green')
 plt.plot(start.x + 0.5, start.y + 0.5, 'ob', markersize=10) # Start point
 plt.plot(goal.x + 0.5, goal.y + 0.5, 'or', markersize=10) # Goal point
 plt.grid(True)
 plt.gca().invert_yaxis()
 plt.show()
def main():
 width = widgets.IntText(description="Width:", value=10)
 height = widgets.IntText(description="Height:", value=10)
 obstacle_x = widgets.IntText(description="Obstacle X:")
 obstacle_y = widgets.IntText(description="Obstacle Y:")
 obstacles_button = widgets.Button(description="Add Obstacle")
 start_x = widgets.IntText(description="Start X:", value=0)
 start_y = widgets.IntText(description="Start Y:", value=0)
 goal_x = widgets.IntText(description="Goal X:", value=9)
 goal_y = widgets.IntText(description="Goal Y:", value=9)
 visualize_button = widgets.Button(description="Visualize")
 obstacles = []
def add_obstacle(b):
 x = obstacle_x.value
 y = obstacle_y.value
 obstacles.append((x, y))
 grid.set_obstacle(x, y)
 def on_visualize_button_clicked(b):
 grid = Grid(width.value, height.value)
 for x, y in obstacles:
 grid.set_obstacle(x, y)
 start = grid.grid[start_x.value][start_y.value]
 goal = grid.grid[goal_x.value][goal_y.value]
 visualize(grid, start, goal)
 obstacles_button.on_click(add_obstacle)
 visualize_button.on_click(on_visualize_button_clicked)
 display(widgets.VBox([width, height, obstacle_x, obstacle_y, obstacles_button, start_x,
start_y, goal_x, goal_y, visualize_button]))
if __name__ == "__main__":
 main()
